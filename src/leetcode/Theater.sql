CREATE database galaxy_theater;

use galaxy_theater;

create table film (
Id int not null auto_increment,
Name varchar(100) not null,
Duration int not null,
Gerne varchar(20) not null,
Country char(2) not null,
primary key (Id)
);

create table room (
	Id int not null auto_increment,
    Name varchar(20) not null,
    primary key (Id)
    
);

create table Screening (
	Screening_id int not null auto_increment,
    Film_id int not null,
    Room_id int not null,
    Constraint FK_film_id foreign key (Film_id) references film(Id),
    constraint FK_room_id foreign key (Room_id) references room(Id),
    primary key (Screening_id),
    start_time datetime not null
);

create table seat (
Seat_id int primary key not null auto_increment,
Room_id int not null,
constraint seat_of_room foreign key (Room_id) references room(Id),
number int not null, 
Seat_row Varchar(1),
x float not null,
y float not null,
constraint position unique (Room_id, Seat_row, number),
constraint location unique (Room_id,x,y)
);


create table customer (
Id int primary key not null auto_increment,
Name varchar(50) not null,
Phone int
);

create table booking (
Booking_id int primary key not null auto_increment,
Customer_id	int not null,
Screening_id int not null,
Booking_time datetime not null,
Total int not null,
foreign key (Customer_id ) references customer(Id),
foreign key (Screening_id) references Screening(Screening_id)
 );


create table reserved_seat (
rs_id int primary key not null auto_increment,	
Booking_id int not null,
Seat_id	int not null,
price float not null,
constraint unique_position unique (Booking_id, Seat_id),
constraint FK_booking foreign key (Booking_id) references booking(Booking_id),
constraint FK_seat foreign key (Seat_id) references seat(Seat_id) 
);

-- error no foreign key consisted to room id : 4
insert into Screening (Film_id, Room_id, start_time) value (2,4,"2025-10-11 8:00");
alter table film add Check (Duration > 0);
-- error : duration could not pass the check because it is not over 0
insert into film( Name, Duration, Gerne, Country) Value ("Movie D",	120,"Comedy","VN");
insert into seat ( room_id, Seat_row, number,x, y) value (1,"A", 1,1,1), (1,"A", 5,1,3), (2,"G", 4,1,1), (3,"F", 6,2,1) ;
insert into customer (Name, Phone) value ("Leslie", 01778500), ("Noah", 017721200),("Dung", 02132200);
insert into booking (Customer_id,Screening_id,Booking_time,Total) value (1,2, "2025-10-11 8:00", 10), (1,3, "2025-10-11 8:00",20), (3,3, "2025-10-11 8:00",30), (2,3, "2025-10-11 8:00",40);
insert into reserved_seat (Booking_id,Seat_id,price) value (9,5,10) , (10,6,20), (11,8, 10), (11, 7, 20), (12, 6, 20), (12, 7, 20);
select * from seat;


-- data generated by AI for search purpose---
INSERT INTO film (Name, Duration, Gerne, Country) VALUES
-- Horror (6)
('Midnight Echo',       102, 'Horror',   'US'),
('Shadows at Sea',       95, 'Horror',   'UK'),
('Whispering Pines',    108, 'Horror',   'CA'),
('Crimson Alley',       117, 'Horror',   'AU'),
('The Hollow Line',      99, 'Horror',   'DE'),
('Silent Passage',      104, 'Horror',   'JP'),
-- Romantic (3)
('Spring Letters',      112, 'Romantic', 'FR'),
('Moonlit Caf√©',         93, 'Romantic', 'IT'),
('Sky of Saigon',       106, 'Romantic', 'VN'),
-- Action (3)
('Pulse Runner',        101, 'Action',   'US'),
('Neon Crossfire',      114, 'Action',   'KR'),
('Last Stand in Perth', 120, 'Action',   'AU');

select * from film;

-- home work --- apply index to better find the gerne of movies
create index gerne_idx on film (gerne);
-- duration fetch 0.00070 second
select * from film where gerne = "Horror";
-- drop index 
drop index gerne_idx on film ;
-- duration fetch 0.00170 second -- slower than with index 40% in the small database
select * from film where gerne = "Horror";

-- data generated by AI for searching purpose --- 
INSERT INTO customer (Name, Phone) VALUES
("Leslie Nguyen", 01778501),
("Noah Tran", 017721201),
("Dung Le", 02132201),
("Ava Pham", 01778502),
("Liam Hoang", 017721202),
("Emma Vo", 02132202),
("Mia Do", 01778503),
("Ethan Bui", 017721203),
("Olivia Dang", 02132203),
("Lucas Phan", 01778504),
("Sophie Truong", 017721204),
("Jack Vu", 02132204),
("An Nguyen", 01778505),
("Bao Tran", 017721205),
("Chi Le", 02132205),
("Dang Pham", 01778506),
("Giang Hoang", 017721206),
("Hanh Vo", 02132206),
("Khai Do", 01778507),
("Linh Bui", 017721207),
("Minh Dang", 02132207),
("Nam Phan", 01778508),
("Oanh Truong", 017721208),
("Phuc Vu", 02132208),
("Quang Nguyen", 01778509),
("Trang Tran", 017721209),
("Uyen Le", 02132209),
("Vy Pham", 01778510);


select * from customer;

create index full_name_index on customer(Name);

-- duration time 0.00036 sec / 0.000028 sec
select * from customer where name = "Dang Pham";








